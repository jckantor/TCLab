{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "# Synchronizing with Real Time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "source": [
    "## Simple use of `tclab.clock()`\n",
    "\n",
    "The tclab module includes a function `clock` for synchronizing calculations with real time.  `clock(tperiod)` is an iterator that generates a sequence of equally spaced time steps from zero to `tperiod`  separated by one second intervals. For each step `clock` returns time since start rounded to the nearest 10th of a second."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tclab\n",
    "\n",
    "tperiod = 5\n",
    "for t in tclab.clock(tperiod):\n",
    "    print(t, \"sec.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`tclab.clock()` is implemented as a Python generator using the Python library `time.sleep()` function. A consequence of this implementation is that `tclab.clock()` is 'blocking' which limits its use for creating interactive demonstrations. See later sections of this user's guide for non-blocking alternatives that can be used for interactive demonstrations or GUI's."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Parameters\n",
    "\n",
    "### `tstep`: Clock time step\n",
    "\n",
    "An optional parameter `tstep` specifies a time step different from one second."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tclab\n",
    "\n",
    "tperiod = 5\n",
    "tstep = 2.5\n",
    "for t in tclab.clock(tperiod,tstep):\n",
    "    print(t, \"sec.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `tol`: Clock tolerance\n",
    "\n",
    "There are some considerations when using `clock`. First, by its nature Python is not a real-time environment. `clock` makes a best effort to stay in sync with the wall clock but there can be no guarantees. The default behavior of `clock` is to maintain long-term synchronization with the real time clock. A `RuntimeError` is raised if the difference between clock time and real time is greater than the optional parameter `tol` (default value of 0.25).\n",
    "\n",
    "The following cell demonstrates the use of `tol` to avoid run time errors due to an intermittent calculation that exceeds the time step specified by `tstep`. In this instance, an extra `sleep` timeout of 0.2 seconds occurs at t=1 and t=2. Together these cause the clock to be delayed a total of 0.4 seconds relative to real time. The default tolerance of 0.25 second would cause a run time error to be generated. Setting tol=0.5 avoids raising that exception."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tclab\n",
    "import time\n",
    "\n",
    "tfinal = 5\n",
    "tstep = 1\n",
    "\n",
    "for t in tclab.clock(tfinal, tstep, tol=0.5):\n",
    "    print(t, \"sec.\")\n",
    "    if 0.5 < t < 2.5:\n",
    "        time.sleep(1.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fixing run time errors due to loss of clock synchronization.\n",
    "\n",
    "If you encounter a `RuntimeError` due to loss of synchronization, there are normally two remedies depending on the underlying cause:\n",
    "\n",
    "1. Synchronization can be lost if you attempting to multitask (say do some web browsing) while an experiment is underway. In this case you should increase the `tol` to a larger value.\n",
    "2. Synchronization can be lost if the loop includes lengthy calculations, such as a computationally intensive control calculation. In the case it may be necessary to increase the `tstep` parameter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using `tclab.clock()` with TCLab\n",
    "\n",
    "The `tclab.clock()` generator can be used to implement and test control and estimation algorithms using the the Temperature Control Laboratory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tclab\n",
    "\n",
    "tfinal = 20\n",
    "tstep = 2\n",
    "\n",
    "with tclab.TCLab() as lab:\n",
    "    lab.Q1(100)\n",
    "    lab.Q2(100)\n",
    "    print(\"\\nSet Heater 1 to {0:f} %\".format(lab.Q1()))\n",
    "    print(\"Set Heater 2 to {0:f} %\".format(lab.Q2()))\n",
    "\n",
    "    sfmt = \"   {0:5.1f} sec:   T1 = {1:0.1f} °C    T2 = {2:0.1f} °C\"\n",
    "    for t in tclab.clock(tfinal, tstep):\n",
    "        print(sfmt.format(t, lab.T1, lab.T2), flush=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
